
[{"content":"","date":"1 February 2025","externalUrl":null,"permalink":"/blog/","section":"Blogs","summary":"","title":"Blogs","type":"blog"},{"content":"","date":"1 February 2025","externalUrl":null,"permalink":"/","section":"Ferchus","summary":"","title":"Ferchus","type":"page"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/tags/japanese/","section":"Tags","summary":"","title":"Japanese","type":"tags"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/tags/language-learning/","section":"Tags","summary":"","title":"Language Learning","type":"tags"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/tags/migaku/","section":"Tags","summary":"","title":"Migaku","type":"tags"},{"content":"It all started during my second trip to Japan in the summer of 2023 when a gachapon machine with UNO tote bags at Akihabara Station malfunctioned. The capsule had gotten stuck while coming down, and there was no way to retrieve it. A young station worker quickly came over to help me. She pulled a key from her pocket, opened the machine, and unstuck the capsule. I opened the compartment, but my bag still wasn’t there. I must have looked very confused because she approached again and gestured for me to turn the handle. When I did, I finally heard the “gasha” of the mechanism and the “pon” of the capsule landing. Happy to have gotten a keepsake for my best friend, I turned to look at the girl. She was bowing, and I, deeply grateful, made my best attempt at a bow. We both smiled, and I went on my way to explore figure shops with my dad. We didn’t exchange a single word.\nThe UNO tote bag gacha prizes.\rIt would be a lovely story to say that this girl and my interaction with her were the reasons I started learning Japanese, but that’s not the case. The real reason is that, to me, that girl was Japan. During the two weeks I was there, not a single day went by without a similar experience. Whether it was at the hotel where we stayed or a curry restaurant in a train station\u0026rsquo;s underground, it became clear to me that serving society is one of the most important values in Japanese culture. Of course, not everyone is as helpful as that girl, and every country has both good and bad people, but if you open yourself to it, you’ll notice how much effort people put into their work to make life better for others.\nAt the time, I was 19 and midway through my video game development degree. I was going through a difficult period, questioning whether my career could truly do any good for society. I had chosen it after finishing Persona 5 during the pandemic and realizing the immense potential video games have to transform us into better versions of ourselves. They let us step into a character’s shoes and offer new perspectives on life. In some cases they help us close chapters of our lives that no longer serve us and open doors to new ones filled with hope. However, looking at the projects being developed in my country, I only saw people trying to squeeze every last penny out of their players.\nSeeing how hard Japanese people worked to provide the best service rekindled a part of me that had felt lost. I realized that while Japan had something I was seeking, I also had something they yearned for. As with all good things in this world, there are sacrifices. As I spent more time among the people, I realized this great emphasis on being helpful was affecting their ability to express themselves honestly. While I was wondering how to be good for others, they were wondering how to be good for themselves.\nA delicious curry place in the underground of JR Osaka Station.\rAs a Mexican living in Mexico, I don’t fear expressing my true self, no matter how small the gesture. If I’m happy, I dance. If I’m sad, I cry. If someone does something I disagree with, I say so. If I see my mom, I hug her. There are very few barriers preventing me from showing the world I am a real person with real feelings. The Japanese, on the other hand, not only face their personal barriers but also those imposed by their culture. Realizing this, I understood we had much to learn from each other. However, there was a significant wall between us. Even without saying a single word, I was able to communicate many feelings to that girl in Akihabara, but it was clear that achieving a deeper mutual understanding would require speaking the same language. That’s why, upon returning to my home in Guadalajara, Jalisco, I began my journey toward Japanese fluency.\nI began with a structured guide, focusing on pronunciation and kana. I can’t overstate how critical it is for beginners to master pronunciation and pitch accent early (Dogen’s phonetics series is excellent). However, my struggles began with SRS. I initially tried learning kanji and vocabulary simultaneously, but it was overwhelming, so I dropped vocabulary at first. I shifted to just kanji using the Remembering the Kanji (RTK) method, tackling 2,200 kanji in four months by studying 20 per day in order to get back to vocab as quickly as possible. While I finished the deck, the lack of context made it a draining experience, and I developed a strong resentment toward Anki.\nAfter RTK, I moved to the Core 2k/6k deck for vocabulary. While kanji familiarity made words easier to learn, RTK reviews consumed too much time, leaving me just as frustrated. Eventually, I switched to Tango N5-N1 decks, which helped me prepare for the JLPT, and therefore, motivated me, but after almost a year and a half of painstaking study, I quit Anki altogether last November. By then, my approach had lost its connection to my original motivation for learning Japanese.\nThe books I was studying with at the end of my time with Anki.\rThroughout this process, I had been trying to balance my studies, personal projects, and Japanese learning, leaving little time or energy to engage with content outside of decks. Additionally, I must clarify something important: I’m not a big fan of anime, manga, or Japanese dramas. I find them entertaining, but I don’t feel a deept enough emotional connection to them as to fuel a journey this long and hard. I tried Satori Reader, but even though it was easy, I couldn’t connect with the stories. I had also tried watching YouTube videos in Japanese, but the autogenerated subtitles were terrible. This meant that apart from studying decks, I wasn’t consuming any content in the language. In total, including other decks I haven’t mentioned, I studied for 273 hours before quitting Anki. In hindsight, it’s incredible how I lasted so long without being in contact with the language outside of the program.\nA month had passed since I decided to quit Anki, and it seemed like the end of my Japanese studies, when I received an email from Migaku. Among other things, it mentioned a feature that caught my attention: AI-generated subtitles for YouTube. The month-long break from Anki made me realize this was exactly what I needed—an approach that allowed me to connect with the people of Japan. While it’s true that most popular Japanese content creators have high production levels, many lesser-known channels make very personal videos that let you connect with them on a deeper level. Having mostly accurate subtitles integrated with Migaku’s system, which not only shows dictionary definitions but also explains words in context, breaks down sentences, and provides full sentence translations, completely changed my relationship with Japanese. I maintained my decision to quit Anki altogether, but, thankfully, I could import the words I had learned with the Tango decks, so it\u0026rsquo;s clear to me that all those hours weren’t wasted.\nNow, all the cards I study are mined with Migaku in just one click. While mining makes it easier to remember words, I believe there’s something that’s not discussed enough: mining sentences keeps you close to the real reason you’re learning Japanese. Whether it’s to watch anime without subtitles, read manga in its original language, or, like me, connect with Japanese people, it’s vital to stay in touch with your motivation. Even with mined sentences, studying has its challenges, but it’s nothing compared to the dreadful feeling of studying for hundreds of hours without remembering why you do it. Pre-made decks still have a place in language learning but should simply serve as a gentle bridge to mining. If you find yourself genuinely hating your experience learning a language you trully care about, ensure most of your time is spent doing something that brings you back to what resonated enough with you to start this journey. Because, in the end, learning a language isn’t just about memorizing words and grammar rules, it’s about opening doors to new worlds and hearts yet to be taken.\nI just reached 2,500 known words!\rJoining the Migaku Discord community helped me realize there are thousands of people in the same boat as me. Although we don’t all share the same story, I know there are many ways I can help others have a better experience and, for some, turn it from an awful grind into a fun, fulfulling activity. I already have some projects in mind that I’ll be sharing in the future, but for now, if you’re transitioning from a JLPT pre-made deck to Migaku, I’ve made this frequency list for the new extension to help you find vocabulary for each level of the exam. Enjoy!\nFerchusGames/JLPT-Migaku-Frequency-List\rA JLPT frequency list compatible with the new Migaku extension sourced from stephenmk\u0026rsquo;s meta dictionary for Yomitan.\rnull 5\r0\rI hope the things I share will be helpful to you. Thank you so much for reading my story, it means a lot to me!\n","date":"15 January 2025","externalUrl":null,"permalink":"/blog/sentence-mining-saved-my-japanese-studies/","section":"Blogs","summary":"How I lost my way in learning Japanese and found it again.","title":"Sentence Mining Saved My Japanese Studies","type":"blog"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"13 December 2024","externalUrl":null,"permalink":"/featured/","section":"Featureds","summary":"","title":"Featureds","type":"featured"},{"content":"","date":"13 December 2024","externalUrl":null,"permalink":"/tags/game-design/","section":"Tags","summary":"","title":"Game Design","type":"tags"},{"content":"","date":"13 December 2024","externalUrl":null,"permalink":"/tags/game-programming/","section":"Tags","summary":"","title":"Game Programming","type":"tags"},{"content":"","date":"13 December 2024","externalUrl":null,"permalink":"/tags/level-design/","section":"Tags","summary":"","title":"Level Design","type":"tags"},{"content":"","date":"13 December 2024","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","date":"13 December 2024","externalUrl":null,"permalink":"/tags/unity/","section":"Tags","summary":"","title":"Unity","type":"tags"},{"content":"\r#\rWhere Is My Wife? by Ferchus, Shasho, PaTo81013, Torres Games\rTutorial level\rClimb Through Hell to Find Redemption #\rIn this vibrant, pixel-art platformer, you play as a married duck who has just perished in a car crash. Separated from his wife—sent to heaven while he’s cast into hell—he embarks on a relentless climb to uncover her fate and redeem himself for the way he treated her in life.\nInferno level\rMaster Tight Platforming Challenges #\rExperience difficult but fair gameplay that will test your skills and perseverance. Armed with responsive controls, you\u0026rsquo;ll need to master:\nDashing through dangerous gaps. Hooking onto points to launch yourself across large distances. Wall-jumping and sliding to navigate vertical obstacles. Kicking a vengeful tire, your relentless enemy. A final boss fight that will put your mastery to the ultimate test. Earth level 1\rA Modern Take on Retro Platformers #\rInspired by classics like Celeste and Super Meat Boy, this game blends challenging mechanics with a nostalgic 90\u0026rsquo;s aesthetic. Its vibrant visuals and chiptune soundtrack set the stage for hard platforming challenges that will push you to your limits.\nEarth level 2\rKey Features #\rPrecise, rewarding controls for the ultimate platforming experience. A vivid pixel-art style that brings the intense platforming action to life. A chiptune soundtrack that keeps the retro vibes alive. Perfect for an evening of thrills, taking between 45 minutes and 1.5 hours to complete. Mountains level\rGamepad supported #\rFully compatible with keyboard and gamepads, including Xbox, PlayStation, and Nintendo Switch controllers with dynamic UI for each one.\nAre you ready to climb your way out of hell and find your loved one?\nAvailable on Windows and Mac.\nWhere Is My Wife? by Ferchus, Shasho, PaTo81013, Torres Games\rGitHub Repository #\rFerchusGames/where-is-my-wife\rIn this vibrant, pixel-art platformer, you play as a married duck who has just perished in a car crash. Separated from his wife—sent to heaven while he’s cast into hell—he embarks on a relentless climb to uncover her fate and redeem himself for the way he treated her in life.\rnull 0\r0\r","date":"13 December 2024","externalUrl":null,"permalink":"/featured/where-is-my-wife/","section":"Featureds","summary":"Climb your way out of hell, conquer precise and difficult challenges, and seek redemption in this gripping platformer!","title":"Where Is My Wife?","type":"featured"},{"content":"\r#\rWhere Is My Wife? by Ferchus, Shasho, PaTo81013, Torres Games\rTutorial level\rClimb Through Hell to Find Redemption #\rIn this vibrant, pixel-art platformer, you play as a married duck who has just perished in a car crash. Separated from his wife—sent to heaven while he’s cast into hell—he embarks on a relentless climb to uncover her fate and redeem himself for the way he treated her in life.\nInferno level\rMaster Tight Platforming Challenges #\rExperience difficult but fair gameplay that will test your skills and perseverance. Armed with responsive controls, you\u0026rsquo;ll need to master:\nDashing through dangerous gaps. Hooking onto points to launch yourself across large distances. Wall-jumping and sliding to navigate vertical obstacles. Kicking a vengeful tire, your relentless enemy. A final boss fight that will put your mastery to the ultimate test. Earth level 1\rA Modern Take on Retro Platformers #\rInspired by classics like Celeste and Super Meat Boy, this game blends challenging mechanics with a nostalgic 90\u0026rsquo;s aesthetic. Its vibrant visuals and chiptune soundtrack set the stage for hard platforming challenges that will push you to your limits.\nEarth level 2\rKey Features #\rPrecise, rewarding controls for the ultimate platforming experience. A vivid pixel-art style that brings the intense platforming action to life. A chiptune soundtrack that keeps the retro vibes alive. Perfect for an evening of thrills, taking between 45 minutes and 1.5 hours to complete. Mountains level\rGamepad supported #\rFully compatible with keyboard and gamepads, including Xbox, PlayStation, and Nintendo Switch controllers with dynamic UI for each one.\nAre you ready to climb your way out of hell and find your loved one?\nAvailable on Windows and Mac.\nWhere Is My Wife? by Ferchus, Shasho, PaTo81013, Torres Games\rGitHub Repository #\rFerchusGames/where-is-my-wife\rIn this vibrant, pixel-art platformer, you play as a married duck who has just perished in a car crash. Separated from his wife—sent to heaven while he’s cast into hell—he embarks on a relentless climb to uncover her fate and redeem himself for the way he treated her in life.\rnull 0\r0\r","date":"13 December 2024","externalUrl":null,"permalink":"/projects/where-is-my-wife/","section":"Projects","summary":"Climb your way out of hell, conquer precise and difficult challenges, and seek redemption in this gripping platformer!","title":"Where Is My Wife?","type":"projects"},{"content":"","date":"19 June 2024","externalUrl":null,"permalink":"/tags/project-management/","section":"Tags","summary":"","title":"Project Management","type":"tags"},{"content":"\rClick the image to go to the Google Play Store listing.\rTray Dash was born as a school project for the 5th semester project class. It was a game where you had to balance food on a tray. The idea originated when my classmate Itzel remembered a 2D mini-game within a mobile game called \u0026ldquo;Egg Baby,\u0026rdquo; where you had to balance an egg on a spoon until you reached the end. In our case, we decided to add another dimension by making it 3D and increasing the number of objects to balance, this time on a tray instead of a spoon.\nEgg Baby Balancing Minigame\nA Rocky Development Start #\rThe development of the application started quite differently since it was my first time leading a team of five people, including two artists and three developers. During the previous vacation, I had researched and taken a course on Jira for product management. So, when the semester began, I decided to take on the role of director and project manager. The first four weeks were spent mainly organizing our Jira page, trying to keep everything in order. However, during the first semester review, I realized that spending so much time on project management was going to end up being a setback for the game’s initial development. Besides being the project manager and director, I had also been assigned the role of lead programmer. Although I had this title, I wasn’t fully committed to it because I was also handling project management, which affected the progress.\nShift in Focus #\rAfter the first review, I decided to focus entirely on being the lead programmer. Following this, we continued working on the game. The project was simple in concept, but I had hoped that it would be the first game I was truly proud of developing and the first project to be fully completed. I had published other games before, but none felt complete and polished. That became the primary goal of the project. As the weeks passed, the game progressed more once I focused solely on development. However, by mid-semester, our professor told us that we were far behind and had a lot to catch up on. The majority of the work was done in the last two months. In the end, the project turned out well, with well-organized art and programming. Despite some personal challenges with programming, everything came together.\nThe Importance of Clean Architecture #\rInitially, everyone could work on their parts, but towards the end, I was the only one who fully understood the programming, making it difficult to ask others to make changes or fix issues. The main lesson learned was the importance of maintaining a clean code architecture. When working alone, you might understand your code’s structure, but in a team, it needs to be modular and clear for everyone to understand and modify easily. Additionally, we wanted to implement a better tutorial for new players, which required creating another scene to separate systems and more. Despite being a good game that people enjoyed, the code wasn\u0026rsquo;t very scalable. During our third review, the professor noted that he liked the game and felt it was relatively polished, but the biggest issue was the controls.\nA Much Needed Change #\rIn Tray Dash, you had to balance the tray forward and backward, left and right, using two sliders. The left slider controlled the vertical tilt, and the right slider controlled the horizontal tilt. However, both sliders were vertical, making it confusing for players. Moving the slider up or down caused the tray to move in unexpected directions. We switched to two joysticks instead, which made the controls more intuitive. We also added toggles in the options menu to invert the axes based on player preference.\nPrevious Sliders\rImproved Sliders\rA Successful Project #\rIn the end, we delivered the project on time. People found it enjoyable and well-polished in terms of gameplay. We added features like camera shake, responsive sound effects, and an animation of fireworks when delivering the food, making the experience more gratifying.\nAvailable on the Google Play Store! #\rClick the image to go to the Google Play Store listing.\rGitHub Repository #\rFerchusGames/tray-dash\rC# 0\r0\rCredits #\rFernando Gonzalez, Itzel Llamas, Juan Rios, Patricio Perez, and Sergio Sanchez.\n","date":"19 June 2024","externalUrl":null,"permalink":"/featured/tray-dash/","section":"Featureds","summary":"An endless runner where players balance a tray of food items and deliver them to their destination. Available on the Google Play Store.","title":"Tray Dash","type":"featured"},{"content":"\rClick the image to go to the Google Play Store listing.\rTray Dash was born as a school project for the 5th semester project class. It was a game where you had to balance food on a tray. The idea originated when my classmate Itzel remembered a 2D mini-game within a mobile game called \u0026ldquo;Egg Baby,\u0026rdquo; where you had to balance an egg on a spoon until you reached the end. In our case, we decided to add another dimension by making it 3D and increasing the number of objects to balance, this time on a tray instead of a spoon.\nEgg Baby Balancing Minigame\nA Rocky Development Start #\rThe development of the application started quite differently since it was my first time leading a team of five people, including two artists and three developers. During the previous vacation, I had researched and taken a course on Jira for product management. So, when the semester began, I decided to take on the role of director and project manager. The first four weeks were spent mainly organizing our Jira page, trying to keep everything in order. However, during the first semester review, I realized that spending so much time on project management was going to end up being a setback for the game’s initial development. Besides being the project manager and director, I had also been assigned the role of lead programmer. Although I had this title, I wasn’t fully committed to it because I was also handling project management, which affected the progress.\nShift in Focus #\rAfter the first review, I decided to focus entirely on being the lead programmer. Following this, we continued working on the game. The project was simple in concept, but I had hoped that it would be the first game I was truly proud of developing and the first project to be fully completed. I had published other games before, but none felt complete and polished. That became the primary goal of the project. As the weeks passed, the game progressed more once I focused solely on development. However, by mid-semester, our professor told us that we were far behind and had a lot to catch up on. The majority of the work was done in the last two months. In the end, the project turned out well, with well-organized art and programming. Despite some personal challenges with programming, everything came together.\nThe Importance of Clean Architecture #\rInitially, everyone could work on their parts, but towards the end, I was the only one who fully understood the programming, making it difficult to ask others to make changes or fix issues. The main lesson learned was the importance of maintaining a clean code architecture. When working alone, you might understand your code’s structure, but in a team, it needs to be modular and clear for everyone to understand and modify easily. Additionally, we wanted to implement a better tutorial for new players, which required creating another scene to separate systems and more. Despite being a good game that people enjoyed, the code wasn\u0026rsquo;t very scalable. During our third review, the professor noted that he liked the game and felt it was relatively polished, but the biggest issue was the controls.\nA Much Needed Change #\rIn Tray Dash, you had to balance the tray forward and backward, left and right, using two sliders. The left slider controlled the vertical tilt, and the right slider controlled the horizontal tilt. However, both sliders were vertical, making it confusing for players. Moving the slider up or down caused the tray to move in unexpected directions. We switched to two joysticks instead, which made the controls more intuitive. We also added toggles in the options menu to invert the axes based on player preference.\nPrevious Sliders\rImproved Sliders\rA Successful Project #\rIn the end, we delivered the project on time. People found it enjoyable and well-polished in terms of gameplay. We added features like camera shake, responsive sound effects, and an animation of fireworks when delivering the food, making the experience more gratifying.\nAvailable on the Google Play Store! #\rClick the image to go to the Google Play Store listing.\rGitHub Repository #\rFerchusGames/tray-dash\rC# 0\r0\rCredits #\rFernando Gonzalez, Itzel Llamas, Juan Rios, Patricio Perez, and Sergio Sanchez.\n","date":"19 June 2024","externalUrl":null,"permalink":"/projects/tray-dash/","section":"Projects","summary":"An endless runner where players balance a tray of food items and deliver them to their destination. Available on the Google Play Store.","title":"Tray Dash","type":"projects"},{"content":"","date":"13 June 2024","externalUrl":null,"permalink":"/tags/multiplayer/","section":"Tags","summary":"","title":"Multiplayer","type":"tags"},{"content":"\r#\rTowerfrog by Ferchus\rTower Frog is a multiplayer game where players engage in platform-based, player-vs-player combat. You must shoot and dodge enemy arrows in a 2D arena filled with teleportation portals, reminiscent of Pac-Man\u0026rsquo;s action style. This project was developed for the networked video games class taught by Professor Edgar Moreno.\nLearning the Fundamentals #\rWe began by learning the fundamentals of Fishnet Networking Evolved framework. This simplifies the network coding for games with its extensive documentation and built-in elements. In class, we first covered the basic concepts of the framework, including RPC (Remote Procedure Call) and how connections between multiple computers work. We learned about game synchronization, server-authoritative models, and client-server systems.\nRemote servers with PlayFlow #\rWe then moved on to the PlayFlow service, which offers cloud-based, authoritative servers and matchmaking systems. Initially, the game was meant to be a prototype copy of Don\u0026rsquo;t Starve Together, but realizing its complexity, I switched to developing this game. The name Towerfrog is a parody of the original game\u0026rsquo;s title, Towerfall. Many years ago, I had a lot of fun playing Towerfall with my sister locally, but the game lacked an online mode. This motivated me to create a version playable remotely on multiple computers using Fishnet.\nDevelopment and Challenges #\rOnce we understood the concepts, development began. I decided to use Fishnet\u0026rsquo;s prediction model. Unlike the popular RPC method, the prediction model sends player inputs to the server, which then executes them, ensuring synchronization and reducing cheating possibilities. This model is more secure because the server handles all execution, and players only send inputs.\nHowever, implementing this model was challenging due to limited documentation and its recent addition to Fishnet. Ensuring synchronization between clients and the server proved difficult. Fortunately, Professor Edgar Moreno provided significant support, especially in the final two months of the class.\nFinal Implementation and Demo Day #\rIn the end, the game worked, but playing through PlayFlow\u0026rsquo;s cloud services resulted in some lag and synchronization bugs. I suspect this is due to the prediction model\u0026rsquo;s demands, possibly overloading the server. For the school\u0026rsquo;s demo day event, where we showcase the semester’s projects, I created a LAN version, which provided a smoother and more competitive experience using Fishnet Network Discovery for server advertisement and connections.\nAvailable on Itch.io #\rYou can download the LAN version of the game from Itch.io. The cloud version used PlayFlow\u0026rsquo;s premium matchmaking service, which I only paid for one month to present for the class. I hope you enjoy it and have fun playing Towerfrog!\nTowerfrog by Ferchus\rGitHub Repository #\rFerchusGames/towerfall-unity-fishnet\rC# 0\r1\r","date":"13 June 2024","externalUrl":null,"permalink":"/featured/towerfrog/","section":"Featureds","summary":"An online and LAN basic recreation of the game Towerfall using an authoritative server and client-side prediction.","title":"Towerfrog","type":"featured"},{"content":"\r#\rTowerfrog by Ferchus\rTower Frog is a multiplayer game where players engage in platform-based, player-vs-player combat. You must shoot and dodge enemy arrows in a 2D arena filled with teleportation portals, reminiscent of Pac-Man\u0026rsquo;s action style. This project was developed for the networked video games class taught by Professor Edgar Moreno.\nLearning the Fundamentals #\rWe began by learning the fundamentals of Fishnet Networking Evolved framework. This simplifies the network coding for games with its extensive documentation and built-in elements. In class, we first covered the basic concepts of the framework, including RPC (Remote Procedure Call) and how connections between multiple computers work. We learned about game synchronization, server-authoritative models, and client-server systems.\nRemote servers with PlayFlow #\rWe then moved on to the PlayFlow service, which offers cloud-based, authoritative servers and matchmaking systems. Initially, the game was meant to be a prototype copy of Don\u0026rsquo;t Starve Together, but realizing its complexity, I switched to developing this game. The name Towerfrog is a parody of the original game\u0026rsquo;s title, Towerfall. Many years ago, I had a lot of fun playing Towerfall with my sister locally, but the game lacked an online mode. This motivated me to create a version playable remotely on multiple computers using Fishnet.\nDevelopment and Challenges #\rOnce we understood the concepts, development began. I decided to use Fishnet\u0026rsquo;s prediction model. Unlike the popular RPC method, the prediction model sends player inputs to the server, which then executes them, ensuring synchronization and reducing cheating possibilities. This model is more secure because the server handles all execution, and players only send inputs.\nHowever, implementing this model was challenging due to limited documentation and its recent addition to Fishnet. Ensuring synchronization between clients and the server proved difficult. Fortunately, Professor Edgar Moreno provided significant support, especially in the final two months of the class.\nFinal Implementation and Demo Day #\rIn the end, the game worked, but playing through PlayFlow\u0026rsquo;s cloud services resulted in some lag and synchronization bugs. I suspect this is due to the prediction model\u0026rsquo;s demands, possibly overloading the server. For the school\u0026rsquo;s demo day event, where we showcase the semester’s projects, I created a LAN version, which provided a smoother and more competitive experience using Fishnet Network Discovery for server advertisement and connections.\nAvailable on Itch.io #\rYou can download the LAN version of the game from Itch.io. The cloud version used PlayFlow\u0026rsquo;s premium matchmaking service, which I only paid for one month to present for the class. I hope you enjoy it and have fun playing Towerfrog!\nTowerfrog by Ferchus\rGitHub Repository #\rFerchusGames/towerfall-unity-fishnet\rC# 0\r1\r","date":"13 June 2024","externalUrl":null,"permalink":"/projects/towerfrog/","section":"Projects","summary":"An online and LAN basic recreation of the game Towerfall using an authoritative server and client-side prediction.","title":"Towerfrog","type":"projects"},{"content":"\rThis video showcases my work during the level design class, featuring four mini projects: Neon White, Portal 2, Fallout 3, and Baba Is You.\nNeon White #\rNeon White is a fast-paced first-person shooter and puzzle-platformer where players assume the role of White, an assassin from Hell competing with other demon slayers for a chance to live permanently in Heaven.\nWe began by analyzing the game, starting with a superficial understanding of its genre and overall concept. Then, we delved into a detailed level-by-level analysis, examining the beats of each level, identifying the rhythm and events at every second. I also compared the game\u0026rsquo;s mechanics with those I aimed to implement in my level.\nOur task was to create a prototype of the game using Unreal Engine, focusing on a tutorial level where players would learn to run, jump, shoot, take shortcuts, and discard cards.\nNeon White Alternate Tutorial Level in Unreal Engine 5.\nPortal 2 #\rPortal 2 is a first-person puzzle-platform game developed by Valve. Players use a portal gun to create portals on flat surfaces to solve puzzles and navigate through the game\u0026rsquo;s levels.\nFor this project, the objective was to design a tutorial level, an intermediate level, and an advanced level. I used the game\u0026rsquo;s built-in level editor, which is quite intuitive. The tutorial and intermediate levels were relatively straightforward to create, but the advanced level was a complex challenge, taking over 10 hours to complete.\nI learned a lot about playtesting during this project, continually adjusting the levels based on player feedback. For instance, I had to increase the lighting in areas where players struggled to see portal surfaces. Sometimes, players would complete levels in unintended ways, and I had to decide whether to fix these or leave them as creative solutions. Most of the time, I opted to fix them.\n(SPOILERS) My Portal 2 Level Pack Walkthrough.\nThis project is available through the download button below, with instructions for installation via the Steam Workshop.\nPortal 2 Levelpack by Ferchus\rFallout 3 #\rFallout 3 is an open-world action role-playing game set in a post-apocalyptic Washington, D.C. Players navigate the Wasteland, completing quests, interacting with characters, and battling enemies.\nFor the Fallout 3 project, we used the G.E.C.K. (Garden of Eden Creation Kit). This exercise focused on learning the tool, which was used for creating Fallout 3, Fallout: New Vegas, and Fallout 4. Despite its somewhat outdated interface, it was fascinating to see how everything worked, from implementing objects to organizing menus. It felt like learning to use Unity again, but without having to write code from scratch.\nAlthough we didn\u0026rsquo;t have enough time to create a lengthy quest, we learned to use the systems effectively. It was quite cool to see our mini-quests integrated into the game, like adding a door in the middle of the player’s house (literally) that led to my custom level.\nThe door in question.\rMy quest on the G.E.C.K. inteface\rBaba Is You #\rBaba Is You is a unique puzzle game where players manipulate the rules of the game by pushing blocks with words to create or modify rules. The goal is to reach the flag or achieve the objective defined by the manipulated rules.\nIn this project, similar to Portal 2, we created a tutorial, intermediate, and advanced level using the game\u0026rsquo;s level editor. Since it’s a 2D game with confined screens, designing the levels was straightforward.\nI tested these levels with three people who were unfamiliar with the game. This allowed me to create a well-structured progression from tutorial to advanced levels, ensuring players learned the game\u0026rsquo;s concepts effectively. It was interesting to see them solve puzzles and feel smart about their solutions. Sometimes, they would find unintended ways to complete the levels, which I had to fix.\n(SPOILERS) My Baba Is You Level Pack Walkthrough.\nThis project is also available through the download button below, with installation instructions provided.\nBaba Is You Level Pack by Ferchus\rThe End of the Line #\rThis experience was incredibly interesting and fun. Although I\u0026rsquo;m not certain if I will become a professional level designer, I found it immensely gratifying to see people play my levels. The best part was seeing the smiles on their faces when they enjoyed my creations.\nIf there\u0026rsquo;s one takeaway from this project, it\u0026rsquo;s the importance of playtesting. It not only helps to improve the final product but also provides the joy of seeing others enjoy what you\u0026rsquo;ve developed. The greatest pleasure of being a game developer is watching people enjoy your games. So, moving forward, I will definitely incorporate more playtesting into my future projects.\n","date":"6 June 2024","externalUrl":null,"permalink":"/projects/level-design-demo-reel/","section":"Projects","summary":"A showcase of my skills as a level designer. It includes a Unreal Engine recreation of Neon White, using Fallout 3\u0026rsquo;s G.E.C.K. and tutorial, intemediate and advanced levels for Portal 2 and Baba Is You.","title":"Level Design Demo Reel","type":"projects"},{"content":"","date":"14 November 2023","externalUrl":null,"permalink":"/tags/deep-learning/","section":"Tags","summary":"","title":"Deep Learning","type":"tags"},{"content":"","date":"14 November 2023","externalUrl":null,"permalink":"/tags/game-ai/","section":"Tags","summary":"","title":"Game AI","type":"tags"},{"content":"\r","date":"14 November 2023","externalUrl":null,"permalink":"/projects/machine-learning-karts/","section":"Projects","summary":"Watch 100 machine learning karts race against each other!","title":"Machine Learning Karts","type":"projects"},{"content":"Creating realistic and engaging characters in video games poses a significant challenge due to the varied ways players interact with them. Each player has their own playstyle, whether it involves sneaking up on enemies or engaging in instant combat. Additionally, some players may have brief interactions with certain characters, while others may spend more time delving into their AI intricacies. From the perspective of AI programmers and designers, they meticulously craft every detail of the characters and their environments. However, for players, these elements only come to life when they encounter them. A diligently planned routine for an enemy\u0026rsquo;s response to player engagement becomes irrelevant if the enemy is defeated with a headshot moments later.\nThe Player Only Knows so Much #\rWhile certain aspects like emotional states can be effectively conveyed through animations and sounds (e.g., a character crying), players often have limited time to grasp the full context surrounding NPCs. Although a subset of curious players might choose to observe their adversaries before engaging, many others will have fleeting encounters. Therefore, it becomes crucial to align a character\u0026rsquo;s AI with its purpose in the game and the attention it is likely to receive from players. Excessively adding AI complexity to incidental characters might impress a small portion of the audience, but the majority would perceive it as poor programming.\nIn AI for Games, Ian Millington provides the following example:\nA guard standing in a dark room hears a noise: \u0026lsquo;I\u0026rsquo;d flick the light switch,\u0026rsquo; we think. If the guard doesn\u0026rsquo;t do that, we might assume they are stupid. [\u0026hellip;] If we see a guard who has heard a noise suddenly turn away and move slowly in the opposite direction, we assume the AI is faulty. The guard should have moved across the room toward the noise. If we observed them for longer and saw the guard head over to a light switch by the exit, their action would be understandable. Then again, the guard might not flick on the light switch after all, and we might take that as a sign of poor implementation. However, the guard may know that the light is inoperable, or they may have been waiting for a colleague to slip some cigarettes under the door and thought the noise was a predefined signal. If we knew all that, we\u0026rsquo;d know the action was intelligent after all.\nMake Changes in Behavior Clear #\rMillington also makes a notable observation: behavioral changes in characters stand out more than the behaviors themselves. When a character fails to exhibit an expected change in behavior, it immediately draws attention and disrupts immersion. Such a scenario can have a detrimental effect on the overall gaming experience, leaving players feeling disconnected and dissatisfied. To avoid this, meticulous attention must be given to ensuring that characters\u0026rsquo; AI responds appropriately to contextual triggers and events, enhancing the sense of realism and maintaining immersion throughout the game.\nBy understanding the diverse ways players approach and interact with characters, designers can make informed decisions about AI behavior, emphasizing the need to create characters that not only feel alive and believable but also adapt convincingly to dynamic gameplay scenarios.\nReferences #\rMillington, I. (2019). AI for games (pp. 23–24). Crc Press, Taylor \u0026amp; Francis Group.\n","date":"21 May 2023","externalUrl":null,"permalink":"/blog/the-perception-window/","section":"Blogs","summary":"Creating realistic game characters requires AI that adapts to diverse player interactions while maintaining immersion.","title":"The Perception Window","type":"blog"},{"content":"\rPlayers Don\u0026rsquo;t Want Intelligent AI #\rThe misconception surrounding AI in video games often stems from the assumption that game characters must possess high levels of intelligence to be considered impressive. However, the truth is that the only thing that needs to be smart is the programmer behind it.\nThe primary objective of video game AI is not to replicate every nuance of complex human behavior, but rather to create interactions that engage and immerse the player in the game world. In the real world, we understand that people act based on their own interests and motivations, shaped by their unique experiences. If we were to shout at someone in the street and they didn\u0026rsquo;t react, we wouldn\u0026rsquo;t jump to the conclusion that they lack intelligence, we would take their lack of a response as acceptable. However, when it comes to AI in video games, our expectations shift. If we shout at an NPC standing in a virtual street and they remain unresponsive, we interpret their lack of reaction as a sign of unintelligence or stupidity.\nThey Need Responsive AI #\rThis distinction arises because video games are interactive media. They surpass the passive consumption of stories or simulations and invite players to actively participate and shape the game world and its inhabitants. Players inherently anticipate having an impact on the characters and the environment, as well as receiving meaningful feedback in return for their actions.\nThe crucial aspect lies in ensuring that the characters respond appropriately to the player\u0026rsquo;s actions, creating a sense of dynamic and believable interaction. When a player initiates an attack on an NPC, the NPC should exhibit self-defense behaviors, fighting back or attempting to flee. Conversely, when the player extends help or assistance to an NPC, expressions of gratitude or rewards should be present to reinforce positive interactions.\nAnd They Want Fun AI #\rThe paramount focus should lie in the ability to engender emergent gameplay that captivates and entertains players, rather than solely seeking to impress them with the intricacies of a complex system. While technical complexity can certainly be awe-inspiring, it is the generation of enjoyable and unpredictable experiences that truly enhances the player\u0026rsquo;s engagement and satisfaction. By prioritizing the creation of AI systems that facilitate dynamic interactions, unexpected outcomes, and moments of surprise, game developers can provide players with immersive and memorable gaming experiences that emphasize the sheer joy of playing.\nFocus on What Really Matters #\rThough there have been times where developers have implemented a large degree of complexity to their AI characters and have succeeded in making the game more fun and immersive, in most cases it is best to keep them as simple as possible.\nIf you don\u0026rsquo;t want your players thinking that the AI you created is dumb, then stop trying to replicate human intelligence and focus in crafting characters that react the way the player wants them to. And if you want your AI to be praised, then look out for ways to improve its ability to foster fun and emergent gameplay that keeps players coming back for more. You\u0026rsquo;ll find that, more often than not, simple design choices end up being more important than technical Intricacies.\n","date":"14 May 2023","externalUrl":null,"permalink":"/blog/its-not-about-complexity-its-about-interaction/","section":"Blogs","summary":"The key to engaging AI in video games is not high intelligence, but responsive and fun interactions that enhance immersion and player enjoyment.","title":"It's Not About Complexity, It's About Interaction","type":"blog"},{"content":"","date":"14 May 2023","externalUrl":null,"permalink":"/tags/graphics/","section":"Tags","summary":"","title":"Graphics","type":"tags"},{"content":"\r","date":"14 May 2023","externalUrl":null,"permalink":"/projects/unity-shader-showcase/","section":"Projects","summary":"An interactive showcase of Unity shaders made in Shader Graph.","title":"Unity Shader Showcase","type":"projects"},{"content":"Some of the posts on this website are edited with the help of AI tools to be more concise. When I use them it\u0026rsquo;s based on a draft that I wrote and after making the changes I always review the AI-generated content before publishing.\nI get my images for the blog posts from unsplash.com.\nThe animated background is a recolor of the one used in Blowfish\u0026rsquo;s exampleSite.\n","date":"6 May 2023","externalUrl":null,"permalink":"/extra/disclaimer/","section":"Extra","summary":"","title":"Disclaimer","type":"extra"},{"content":"","date":"6 May 2023","externalUrl":null,"permalink":"/extra/","section":"Extra","summary":"","title":"Extra","type":"extra"},{"content":"\rWhat is Symbolic AI? #\rSymbolic AI is a branch of artificial intelligence that uses a symbolic system to represent and manipulate knowledge. A symbolic system consists of two components: a set of knowledge, which can be words, numbers, sentences, pictures, or any other kind of information, and a reasoning algorithm to generate problem solutions or new knowledge.\nSearch and knowledge are intrinsically linked in AI. The more knowledge you have, the less searching you need to do for an answer you need. Conversely, the more search you can do, the less knowledge you need. This trade-off between knowledge and search is unavoidable in any AI system. Symbolic systems acknowledge this and give their algorithms a large amount of knowledge to process. They have been widely applicable to games, as they can model various aspects of game logic, such as blackboard architectures, pathfinding, decision trees, state machines, and more.\nThe Rise of Deep Learning #\rIn recent years, there was a tendency to assume that symbolic approaches were dead, and that deep learning was the future of AI. Deep learning is a form of statistical computing that uses neural networks to learn from data and perform tasks such as image recognition, natural language processing, and game playing. Deep learning is essentially a compute intensive search technique: it tries to find patterns in data by adjusting the weights of the network connections.\nOne of the most impressive examples of deep learning is AlphaGo Zero, a program that learned to play the game of Go from scratch, without any human guidance or prior knowledge. AlphaGo Zero had minimal knowledge of the rules of the game, but extraordinary amounts of processing time and resources: it played millions of games against itself to improve its skills.\nSimplicity Drives Control #\rHowever, this does not mean that symbolic AI is obsolete or irrelevant. In fact, for most game applications, symbolic AI is still preferable and superior to deep learning. For example, a character that needs to use a health pack when injured can be told that explicitly using a simple rule:\nIF injured THEN use health pack This rule requires no search at all: it directly tells the character what to do in a given situation. It is also easy to understand, modify, and debug by developers. On the other hand, if we wanted to use deep learning to achieve the same behavior, we would need to train a neural network with a lot of data and feedback, which would take a lot of time and resources. And even then, we would not have much control or insight into how the network makes its decisions.\nSymbolic AI Prevails #\rThe only way any algorithm can outperform another is to consume more processing power or to be optimized toward a specific set of problems. However, games are usually designed to run on consumer hardware, which means that graphics and sound take up the majority of the processing power. For AI, this means that game developers have to be smart and efficient with their algorithms. In many cases, low computation / high knowledge approaches are often the clear winners.\nThis is not to say that statistical computing techniques are not useful for games. They can be very useful for specific problems that require complex pattern recognition or adaptation. However, for games they are often unnecessary: the same effect can often be achieved better, faster, and with more control using a simpler approach.\nIn conclusion, AI used in games is still largely based on symbolic technology. Symbolic AI offers many benefits for game development: it is expressive, efficient, transparent, and flexible. Symbolic AI is not dead: it is alive and kicking in games.\nReferences #\rMillington, I. (2019). AI for games (pp. 5–8). Crc Press, Taylor \u0026amp; Francis Group.\n","date":"6 May 2023","externalUrl":null,"permalink":"/blog/symbolic-ai-why-games-still-need-it/","section":"Blogs","summary":"Despite the rise of deep learning, symbolic AI remains crucial in game development for its efficiency, transparency, and flexibility.","title":"Symbolic AI: Why Games Still Need It","type":"blog"},{"content":"\r(Website of the Year)\rHi, I\u0026rsquo;m Ferchus, an enthusiastic game development student, driven by a deep passion for crafting immersive gaming experiences. With a solid foundation in game design and programming, my goal is to push the boundaries of interactive entertainment and contribute to the advancement of the gaming industry while embracing continuous learning and growth.\nI created this site using Hugo with the Blowfish theme. If you want to see its source code you can check the GitHub repo:\nFerchusGames/ferchus.com\rFerchus\u0026rsquo; official website.\rHTML 0\r0\r⠀ Stay tuned for more posts!\r","date":"1 May 2023","externalUrl":null,"permalink":"/blog/hello-world/","section":"Blogs","summary":"My first post.","title":"Hello World!","type":"blog"},{"content":"","date":"1 May 2023","externalUrl":null,"permalink":"/tags/website/","section":"Tags","summary":"","title":"Website","type":"tags"},{"content":"\r","date":"18 March 2023","externalUrl":null,"permalink":"/projects/custom-unity-physics-engine/","section":"Projects","summary":"Simple physics engine made in Unity without using built in ones.","title":"Custom Unity Physics Engine","type":"projects"},{"content":"\r","date":"9 March 2023","externalUrl":null,"permalink":"/projects/opengl-pyramids/","section":"Projects","summary":"Watch thousands of pyramids bounce around in a cube. Made entirely with OpenGL in C++.","title":"OpenGL Pyramids","type":"projects"},{"content":"\r","date":"17 July 2022","externalUrl":null,"permalink":"/projects/dicephemy/","section":"Projects","summary":"GMTK Jam 2022 submission. A puzzle action game about rolling a die and evading hellish cubes.","title":"Dicephemy","type":"projects"},{"content":"\r","date":"8 June 2022","externalUrl":null,"permalink":"/projects/lamp/","section":"Projects","summary":"An addictive quick reflexes game with a banger soundtrack.","title":"Lamp?","type":"projects"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]